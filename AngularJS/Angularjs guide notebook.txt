下面的页面包括了所有与该版本相关的官方维护资源：
https://code.angularjs.org/1.5.5/docs/guide

chapter 1 介绍
什么是Angular?
1. library：你的代码主导；
2. frameworks：框架主导；
3. angularjs两者都不属于；
一个完整的客户端解决方案
1. angularjs适合于CRUD的web app.
2. 游戏类和GUI编辑器大量操作DOM，使用jquery更好些，不适合angularjs.
angulajs之禅
1. angularjs是申明式代码，不是命令式代码；
2. 解耦DOM操作与业务逻辑；
3. 代码结构不好，就不好测试，重视可测试性；
4. 解耦客户端代码和服务器端代码；
5. 框架支持设计UI，开发业务，测试；
angularjs的好处：
1. 去掉了注册回调的脚手架代码，更简洁；
2. 不再经常操作底层的DOM；
3. 数据从服务器到DOM对象到UI更加流畅；
4. 启动，初始化简单；

chapter 2 概念总览：
1. 模板：带有额外标记的html;
2. 指令：定制的属性和元素，用于扩展html;
3. 模型：在视图中显示给用户的，并与用户交互的数据；
4. scope: 模型存储的上下文，以便指令，控制器和表达式能访问数据模型；
5. 表达式：在scope中访问变量和函数；
6. Compiler：编译模板，实例化指令和表达式；
7. Filter：格式化显示给用户的表达式的值；
8. 视图：用户看到的东东（DOM）；
9. 数据绑定：在模型和视图之间同步数据；
10. 控制器：视图后面的业务逻辑；
11. 依赖注入：创建和包绕对象和函数；
12. Injector：依赖注入的容器；
13. 模块：一个包括了控制器、filter、服务、指令等不同app部分的容器，容器中的各部分用于配置infector；
14. 服务：独立于视图的可重用的业务逻辑；

数据绑定：
1. 用angularjs写的html就叫模板；
2. 模板经过编译器加载，变形，渲染后就成为视图；
3. 在angularjs中，只有指令可以直接访问DOM，如要访问DOM，就需要自定义指令；
添加UI逻辑：控制器
1. 控制器可以暴露变量和函数给表达式和指令；
2. InvoiceController as invoice：实例化一个控制器，变量名为invoice.
独立于视图的业务逻辑：服务
1. 用到了依赖注入；
2. DI容量就是Infector;
3. angularjs.module（）管理注册；
4. angularjs启动时，它先去加载与ng-app同名的模块，再链式解决下面的依赖模块；
访问后端：
1. 使用自定义的服务去访问后端；

chapter 3 数据绑定
1. 模型与视图的数据双向绑定；
2. 编译后的html是一个双向绑定的活视图；
3. 视图只是模型的一个简单的投射；
4. 控制器看不到视图，易于测试；

chapter 4 控制器
1. 用一个js的构造函数定义，用于增强scope;
2. ng-controller指令把控制器构造函数绑定到DOM，并初始化构造器对象；
3. 初始化时，一个子$scope会被创建，并注入到构造器对象中。
4. controller as，这个构造器实例将做为$scope的一个属性；














