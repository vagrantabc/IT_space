申明：若需转载，请注明出处：

下面的页面包括了所有与该版本相关的官方维护资源：
https://code.angularjs.org/1.5.5/docs/guide

chapter 1 介绍
什么是Angular?
1. library：你的代码主导；
2. frameworks：框架主导；
3. angularjs两者都不属于；
一个完整的客户端解决方案
1. angularjs适合于CRUD的web app.
2. 游戏类和GUI编辑器大量操作DOM，使用jquery更好些，不适合angularjs.
angularjs之禅
1. angularjs是申明式代码，不是命令式代码；
2. 解耦DOM操作与业务逻辑；
3. 代码结构不好，就不好测试，重视可测试性；
4. 解耦客户端代码和服务器端代码；
5. 框架支持设计UI，开发业务，测试；
angularjs的好处：
1. 去掉了注册回调的脚手架代码，更简洁；
2. 不再经常操作底层的DOM；
3. 数据从服务器到DOM对象到UI更加流畅；
4. 启动，初始化简单；

chapter 2 概念总览：
1. 模板：带有额外标记的html;
2. 指令：定制的属性和元素，用于扩展html;
3. 模型：在视图中显示给用户的，并与用户交互的数据；
4. scope: 模型存储的上下文，以便指令，控制器和表达式能访问数据模型；
5. 表达式：在scope中访问变量和函数；
6. Compiler：编译模板，实例化指令和表达式；
7. Filter：格式化显示给用户的表达式的值；
8. 视图：用户看到的东东（DOM）；
9. 数据绑定：在模型和视图之间同步数据；
10. 控制器：视图后面的业务逻辑；
11. 依赖注入：创建和包绕对象和函数；
12. Injector：依赖注入的容器；
13. 模块：一个包括了控制器、filter、服务、指令等不同app部分的容器，容器中的各部分用于配置infector；
14. 服务：独立于视图的可重用的业务逻辑；
*********************************************************************************
概念级：数据绑定，scope, DI，模板，Bootrap（启动），module
小组件：angularjs表达式，插值符号，Filter，form表单控件
大组件：controller，service，Direcitve，Component，animation
        controller，service，Direcitve是最常用的三大组件  
系统级：模板编译器，injector，Provider（向injector提供处方），Component Router
其它：测试，国际化，产品化，迁移，兼容性，安全，css，SEO  
*********************************************************************************

数据绑定：
1. 用angularjs写的html就叫模板；
2. 模板经过编译器加载，变形，渲染后就成为视图；
3. 在angularjs中，只有指令可以直接访问DOM，如要访问DOM，就需要自定义指令；
添加UI逻辑：控制器
1. 控制器可以暴露变量和函数给表达式和指令；
2. InvoiceController as invoice：实例化一个控制器，变量名为invoice.
独立于视图的业务逻辑：服务
1. 用到了依赖注入；
2. DI容量就是Infector;
3. angularjs.module（）管理注册；
4. angularjs启动时，它先去加载与ng-app同名的模块，再链式解决下面的依赖模块；
访问后端：
1. 使用自定义的服务去访问后端；

chapter 3 数据绑定
1. 模型与视图的数据双向绑定；
2. 编译后的html是一个双向绑定的活视图；
3. 视图只是模型的一个简单的投射；
4. 控制器看不到视图，易于测试；

chapter 4 控制器
1. 用一个js的构造函数定义，即.controller()方法，用于增强scope;
2. ng-controller指令把控制器构造函数绑定到DOM，并初始化构造器对象；
3. 初始化时，一个子$scope会被创建，并注入到构造器对象中。
4. controller as，这个构造器实例将做为$scope的一个属性；
5. 使用控制器：给$scope添加状态和函数；
6. 不要操作DOM以反映显现逻辑；
   不要格式化输入（使用form控制）和输出（使用filter）;
   不要在控制器之间共享状态（使用服务）；
   不要管理组件（如服务）的生命周期；
设置$scope对象的初始状态
1. 即给$scope对象绑定属性；
2. 在控制器注册后，$scope对象的这些属性即可作为视图模型，被模板所用；
3. 使用ng-controller指令绑定到DOM；
4. 在模板中使用$scope对象的属性绑定表达式；
给$scope对象添加行为
1. 即给$scope对象添加方法；
2. ng-model会给$scope绑定一个变量名；
3. 反之，任何$scope的属性（包括方法）都可被表达式或事件处理指令调用；
正确使用控制器
1. 一个控制器只应该包括一个视图的业务逻辑；
2. 把复杂的业务逻辑封装到服务中，通过依赖注入调用服务；
把控制器与scope对象关联
1. 通过ng-controller指令；
2. 通过$route服务；
3. 通常约定，控制器命名以大写字母开头，以Controller结尾；
4. 控制器的方法可以带参数；
5. 简单的绑定model到输入框：<input ng-model="customSpice">；
6. scope的继承：把controller绑到DOM的不同层级；
7. 外层的scope作为父类，内层的scope作为子类，继承与重写与OOP原理一致；
8. 在最外层的controller之外，是root scope；
9. 控制器的测试：参见UT（略）

chapter 5 服务
1. 服务对象是使用DI包绕在一起的可取代对象，可以跨app共享代码；
2. 懒加载：只有有依赖时才加载服务；
3. 单例：一个组件对服务有依赖时，通过服务工厂得到对这个服务对象的一个引用；
4. 内置服务以$开头；
5. 控制器、filter、服务、指令都可以依赖服务对象；
6. 使用module.factory("服务名"，【依赖..., 服务工厂函数】)，服务工厂函数返回函数或对象；
7. 解释6：注册服务名，服务工厂函数；
8. 依赖申明的顺序与工厂函数的顺序一致；
9. 使用$provider去注册一个服务，常用于UT，格式如下：
   angular.module('myModule', []).config(['$provide', function($provide) { ｝
10. UT： Jasmine spy (mock) 略

chapter 6 scope对象
1. scope: 是应用模型的对象引用，是表达式的执行上下文。多层scope模拟了DOM的层级结构，可以watch表达式，传播事件；
2. 特点：
   a. 提供$watch服务，观察模型变化；
   b. 提供$apply服务，传播事件直达视图层；
3. 子scoope: 继承父scope；
4. 孤scope: (见directive chapter 13)；
5. 表达式依赖一个具体的scope才有意义；
scope是数据模型
1. 在模板链接阶段，指令会在scope上设一个watch，如果scope值有变化，watch就会知会指令，到DOM上去渲染更新的值；
2. 控制器和指令都有指向scope的引用，但控制器和指令相互之间没有引用，控制器对视图不可知；
3. 当scope属性绑定到input组件时，组件值变化时，scope属性会自动更新；
4. scope是视图数据的唯一来源；
scope的层级结构：
1. 每个app只有一个根scope，但有若干个子scope；
2. 应用可以有多个scope，一些指令也会创建新的scope，有层级关系；
3. 最终，scope会形成一棵树，与DOM树并存；
4. 子scope原型继承父scope，直到root scope;
从DOM中获取scope
1. ng-app定义了root scope;
2. 右击元素-》检查-》console-> angular.element($0).scope() 或 $scope
scope的事件传播
1. scope的事件传播类似于DOM事件，向下传给子$broadcast('MyEvent')或向上$emit('MyEvent')传给父；
scope的生命周期
1. $injector启动应用，创建root scope，链接模板，指令会生成子scope；
2. 在链接模板时，指令把watch注册到scope；
3. scope.$apply()观察模型的变化（对开发者隐藏）； 注：除非实现定制的事件回调或第三方库回调，才会写scope.$apply()
   同步：controller，异步： $http, $timeout or $interval
4. $apply之后进入$digest阶段，从根scope开始，到子scope都遍历调用$digest服务;
   在$digest服务中，通过watch查检model变化（脏检查），若有，调用watch listener;
5. 子scoope不再被需要，它的创建者调用 scope.$destroy()销毁对象，中止$digetst传播,回收内存；
scope与指令
1. 编译阶段，编译器基于DOM模板匹配指令，指令两类；
2. 观察式指令，如{{}}，使用 $watch()的监听器，表达式变化之后，它们被通知；
3. 监听式指令，如ng-click注册到DOM的监听器；点击-》触发监听-》$apply回调-》修改model-》watch-》视图; 外部事件
创建scope的指令
1. 查看任一DOM元素的scope:  angular.element(aDomElement).scope();
2. ng-controller 和 ng-repeat会创建子scope;
3. 其它元素不创建scope;
控制器与scope:
1. 控制器通过scope给模板暴露方法；
2. 控制器定义改变模型（即scope的属性）的方法；    
3. 控制器可以在model上注册watch，控制器行为完成后，watch立即执行；
Scope $watch
1. 脏检查时，不访问DOM，只对比js对象的属性，效率高；
2. $watch的三种方式：
   a. 通过引用：scope.$watch (watchExpression, listener)  只检查watchExpression的整体返回值，如果返回值是数组或对象，内部变化不检查；最有效
   b. 通过集合内容：scope.$watchCollection (watchExpression, listener) 当数组或对象内部的项有新增、删除、重排序时，被检查到。 只查第一层，类似于浅拷贝；代价高
   c. 通过值：scope.$watch (watchExpression, listener, true) 检查任何变化；代价最高
集成浏览器的事件环
1. angularjs与浏览器事件环的交互：
   a. 浏览器的事件环等待外部事件；
   b. 外部事件到达后进入js回调，在js上下文中可修改DOM；
   c. 回调结束，浏览器离开js上下文，基于DOM变化重新渲染视图；
2. 以angularjs的方式重新描述1:
   前置： 同1(a)
   a. 调用scope.$apply(stimulusFn)进入angular上下文；stimulusFn是你想做的事;
   b. 执行stimulusFn，修改应用状态；
   c. 进入$digest循环（大环），内含两个小环，一个是 $evalAsync队列(queue)，一个是 $watch列表(list),
      大环一直循环到model稳定，即$evalAsync队列为空，且$watch列表不再检测到变化:
   d. $evalAsync队列: 当前栈帧以外有一些工作需要调度，由$evalAsync队列完成，避免UI闪烁；
   e. $watch列表: 是一套表达式，大循环可导致表达式值改变，引起$watch调用，修改DOM；
   f. 大循环完成，进入1(c)
*************************************
scope.$parent指向scope的父作用域；
scope.$$childHead指向scope的第一个子作用域；
scope.$$childTail指向scope的最后一个子作用域；
scope.$$nextSibling指向scope的下一个相邻作用域；
scope.$$prevSibling指向scope的上一个相邻作用域；
*************************************
   
   
chapter 7 依赖注入
1. injector子系统掌管组件创建，分析依赖，按需提供依赖；
DI在angular中无处不在
1. services, directives, filters, 和animations：通过可注入的工厂方法或构造函数创建，可注入组件：服务、值；
2. Controllers：通过构造函数创建，可注入组件：服务，值，特别依赖；
3. run方法：接受一个函数，该函数可注入组件：服务，值，常量，不能注入provider.
4. config方法：接受一个函数，该函数可注入组件：provider，常量，不能注入服务和值组件；
工厂方法：//depService指依赖的服务
1. 定义服务: angular.module('myModule', []).factory('serviceId', ['depService', function(depService) {  // ...}])
2. 定义指令：angular.module('myModule', []).directive('directiveName', ['depService', function(depService) {  // ...}])
3. 定义filter: angular.module('myModule', [])..filter('filterName', ['depService', function(depService) {  // ...}]);
4. 以上方法完成后，都返回module，以方便链式编程；
Module方法（指config和run方法）：
1. angular.module('myModule', []).config(['depProvider', function(depProvider) {  // ...}])
2. angular.module('myModule', [])..run(['depService', function(depService) {  // ...}]);
控制器定义的数组式标记法
1. someModule.controller('MyController', ['$scope', 'dep1', 'dep2', function($scope, dep1, dep2) {//...}]);
2. 对同一个app，服务是单例的，同一种类型的控制器可以有多个实例；
3. $scope: 控制器是被绑定到DOM的某个元素，所以可依赖scope；其它组件如服务只能依赖root scope;
4. resolves: 如果控制器是作为route的一部分被实例化的，那么任何做为route构成部分的值都可注入到控制器；
依赖注解
1. angular使用injector调用服务工厂和控制器，而这些调用又有依赖，有三种方式告之injector这些依赖：
2. 方式一：内联数组标记法(推荐)：someModule.controller('MyController', ['$scope', 'greeter', function($scope, greeter) {  // ...}]);
   第二个参数是数组，数组最后一个是函数，函数参数序与依赖相同；
3. 方式二：$inject属性标记法：
	var MyController = function($scope, greeter) {  // ...}  //定义一个普通函数对象
	MyController.$inject = ['$scope', 'greeter'];  //给这个函数对象的$inject属性加入依赖数组
	someModule.controller('MyController', MyController); // 定义控制器
4. 方式三：隐式标记法，假设参数名就是函数名;
  【一般不推荐，若使用minifiers/obfuscators等js工具，会出错，想避免的话使用 ng-annotate工具和ng-strict-di】
使用严格依赖注入模式
1. 在使用ng-app的那个元素上加上ng-strict-di指令；　<html ng-app="myApp" ng-strict-di>
2. 当使用隐式标记法时，严格模式会抛异常；
3. 手工启动时在配置项中加入的方式： angular.bootstrap(document, ['myApp'], {strictDi: true});　
为什么使用DI
1. 组件（对象或函数）有三种方式取得依赖（前两种是硬编码，难于修改，难于测试）：
	a. 组件使用new运算符创建依赖；
	b. 组件通过引用全局变量查找依赖；
	c. 当它需要的时候，依赖会传给它；
2. injector是一个service locator，它负责构造和查找依赖；
3. angularjs编译模板时，会处理ng-controller指令，进而要求injector创建controller实例，进而处理依赖；
   要点：ng-controller->injector->controller实例和依赖； controller实例本身不知道injector的存在；
********************************************************************************************************************************************************
More formally, the Law of Demeter for functions requires that a method m of an object O may only invoke the methods of the following kinds of objects:[2]

O itself
m's parameters
Any objects created/instantiated within m
O's direct component objects
A global variable, accessible by O, in the scope of m   
********************************************************************************************************************************************************

chapter 8 模板
1. 概念: 包含了angularjs的元素和属性的html;
2. 可使用的元素和属性：
   a. 指令，有些指令元素看上去与html元素相同，但是是增强过的，如form，input，a，select，textarea;
   b. Markup: 即{{表达式}};
   c. Filter: 格式化显示数据；
   d. Form controls: 验证用户输入
3. 单页应用：基于$route配置，通过ngView指令，在一个主页中的不同部分，加载一小段模板代码（partials），以显示多个视图；

chapter 9 表达式
1. 概念：一小段js类的代用，主要用于插值绑定；{{ 值表达式 }}，ng-click="函数设用表达式"
2. angularjs表达式 vs js表达式
   a. js基于全局window，angularjs基于scope;
   b. 计算未定义的属性，js生成引用错误或类型错误，angularjs生成null或undefined，没js那么严厉（Forgiving）;
   c. angularjs表达式不能使用条件，循环，或抛常，除了三目操作符；
   d. angularjs表达式不能做函数申明或正则表达式创建；
   e. angularjs表达式不能使用new创建对象；
   f. angularjs表达式不能使用',',‘void’操作符；
   g. 可以使用filter;
3. 计算angularjs表达式：$eval(angularjs表达式)
4. $parse服务： $parse(String expression to compile), var getter = $parse('user.name'); 转angular表达式为函数；
5. window-》$window, location->$location， angularjs表达式不访问window,location,document等传统全局对象；
6. 可以使用this；
7. 局部对象可以使用$locals；
*********************************************
selfReferential: {
    'this': {type: AST.ThisExpression },
    '$locals': {type: AST.LocalsExpression }
  }
*********************************************
8. $event: 即jQuery中的Event Object，在使用 ngClick或ngFocus时会暴露在指令的scope中。
9. 一次性绑定：以‘::’开头的表达式是一次性表达式； {{::name}}   {{name}}
10. 一次性绑定用于注销或释放资源，减少watch的表达式的数量，使得digest过程更快；
11. 适用场合：一旦设置，不可改变的地方；
12. 一次性表达式值稳定算法原理(了解)：
   a. 假设表达式以::开头，进入digest循环，表达式做脏检查，存值为V；
   b. 若V不是未定义，标记表达式为‘稳定’，当退出digest循环时，起一个调度任务去注销对这个表达式的watch;
   c. 处理digest循环至结束；
   d. 当digest循环结束时，所有的值都已处理，继续处理注销watch的任务队列；
      对于每一个将被注销的watch，计算对应的表达式是否仍不是未定义的，如果是这种情况，销注watch;
	  否则，不注销watch，以便在下次digest循环时继续做脏检查；

chapter 10 Interpolation与数据绑定
1. 用于给文件结节或属性值提供数据绑定；<a ng-href="img/{{username}}.jpg">Hello {{username}}!</a>  //插值符号，即{{}}
2. 原理：编译时，编译器使用 $interpolate查看文本节点和属性是否有{{表达式}}，如果有，它给节点加一个插值指令，
   并给插值函数加一个watch。这样，在digest周期时就会更新对应文本节点和属性的值。插值指令优先级100,每个链接都设置一个watch；
3. 绑定到bool属性：  ng-disabled, ng-required, ng-selected, ng-checked, ng-readOnly , ng-open;
   错误：<button disabled="{{isDisabled}}">Disabled</button>
   正确：<button ng-disabled="isDisabled">Disabled</button>;   //ng-disabled="angular表达式"，这里不用插值符号；
4. 使用ngAttr绑定到任意属性
   a. 使用ng-attr-【属性名】;
      原理：$interpolate的allOrNothing标记此时会派上用场，如果插值字符中的任何表达式导致了未定义，属性将会被移除；
   b. 如果原属性名是骆驼风格的，如viewBox，改写为下划线风格，如ng-attr-view_box；
   c. 一般可使用原属性名，若出现问题，就可以试下ngAttr。
     如<select ng-attr-size={{name}}>，
	   <textarea ng-attr-placeholder={{name}}>，
       <button ng-attr-type={{type}}>	   
5. 指令的属性要么是表达式，要么是{{表达式}}，禁止在表达式中再用插值符号，可能出现难以定位的错误；
   例如：<div ng-show="form{{$index}}.$invalid"></div>
6. 在模板中，用this表示scope;  //<div ng-show="this['form' + $index].$invalid"></div>
	  
chapter 11 filter 
1. 格式化显示的值，用于视图模板，控制器或服务；
2. 底层的API是filterProvider；
3. 用于视图模板：{{ expression | filter }}
   e.g.:{{ 12 | currency }} 显示$12.00，
   完整用法：{{ currency_expression | currency : symbol : fractionSize}}
4. filter的链式使用：{{ expression | filter1 | filter2 | ... }}
5. 带参数的filter: {{ expression | filter:argument1:argument2:... }}
   e.g.{{ 1234 | number:2 }} 显示 1,234.00
在controller，service和directive中使用filter注入；
1. 注入filter时的命名： e.g. 下面有一个库过滤器叫number，按<filterName>Filter的格式，就叫numberFilter；
   e.g. controller('FilterController', ['filterFilter', function(filterFilter) {...//}
2. 注入的filter本身是一个函数，这个函数带的第一个参数是被格式化的对象，后面带格式化参数；
3. filter可以在模板中调用，也可以在js中调用，但在js中调用效率更高；
创建自定义filter
1. 在module中注册一个新的filter工厂函数，内部会调用$filterProvider服务；
   //用函数来封装特定接口创建对象的细节，这个函数就是工厂函数;
******************************************   
angular.module('myReverseFilterApp', [])
.filter('reverse', function() {
  return function(input, uppercase) {
    var out = "";
	...//
    return out;
  };
})   
******************************************
2. 有状态的filter
  a. 强烈不推荐，无法优化，常导致性能问题；
  b. 若有需要，把状态暴露成model，或把它转为filter的参数；
  c. 实现：decorateFilter.$stateful = true;
  d. 使用module.value（）定义全局变量：.value('decoration', {symbol: '*'});
*****************************************************************************
API自带的filter:
currency： 格式化货币
date：所有年月日时分秒毫秒上午下午时区周纪元等
filter：从数组中选一个子集，返回一个新数组
json：转js对象到json的字符串
limitTo：在数组或字符串或数字中，从头开始或从尾开始，取指定个数元素，创建新数组或字符串；
lowercase：转小写
number：格式化数字为文本；
orderBy：对指定数组排序；
uppercase：转大写
*****************************************************************************   

chapter 12 forms
1. 什么叫controls: 指input, select, textarea, 用户可以输入数据；
2. 什么叫form: 一组controls的集合，主要目的用于归组；
3. Form和controls可以提供验证服务，属于客户端验证；
4. 客户端验证用户体验好，但容易被绕过，必须要服务器端验证
简单form
1. 用ngModel指令绑定;
2. <form novalidate class="simple-form"> 
   // novalidate用于disable掉浏览器本身的form验证；
   // 注意class的设置
3. 用户的输入只有通过验证，才会被设给model;
4. angular.copy(source, [destination])创建一个source的深拷贝；
使用css类
1. input.ng-valid.ng-touched ： //一个元素的class属性中要同时有这两个类名，样式才生效;
2. ngModel会给元素加以下class:
   a. ng-valid: 模型合法；
   b. ng-invalid： 模型不合法；
   c. ng-valid-[key]: 对$setValidity（ngModelController方法的方法之一）加的每一个合法的key，加上本类；
   d. ng-invalid-[key]: 对$setValidity加的每一个不合法的key，加上本类；
   e. ng-pristine: 控制器还没有与本元素交互；
   f. ng-dirty: 控制器已与本元素交互；
   g. ng-touched: control组件已被弄脏；（即使还是原来的值，但发生了用户交互）
   h. ng-untouched: control组件未被弄脏；
   i. ng-pending: 有$asyncValidators(ngModel的属性)未被执行；
绑定到form和control的状态
1. 一个form是FormController的一个实例，可以使用name属性发布到scope; 
   e.g.: <form name="form" class="css-form" novalidate>
   //因为name="form"，所以$scope.form是一个form.FormContrller实例；
   //参见form.FormController API文档
2. 一个有ngModel指令的input control执有一个NgModelController的实例。
   使用input control的name属性，control实例可以发布成form实例的属性；
   e.g.: <input type="text" ng-model="user.name" name="uName" required="" />
   //因为name="uName"，所以$scope.form.uName是一个ngModel.NgModelController的实例；
3. 结合$touched，可以显示用户交互后的错误消息；
4. 结合$submitted，可以显示用户提交后的错误消息；
5. form.$setPristine();  参见API文档：form.FormController的接口
6. $error：一个hash表，错误验证器的id是key.
定制的模型更新触发器：ng-model-options
1. 缺省情况下，内容的更新会触发模型更新和form验证，是“立即更新”方式；
2. 可以使用ngModelOptions指令只让特定事件触发更新和验证；
3. blur: 弄脏，丢失焦点，doc有动画示意，很直观；
4. ng-model-options="{ updateOn: 'mousedown blur' }"  //指定两个事件
5. ng-model-options="{ updateOn: 'default blur' }" //除了缺省，再加一个事件
非立即（防反跳）模型更新
1. 使用 ngModelOptions指令和debounce关键字；对解析器，验证器和model的标签属性生效；
   //ng-model-options="{ debounce: 500 }"
   //最后的内容更新后0.5秒，触发缺省事件；
2. 使用debounce对象时，对每种事件延迟进行描述：
   //ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"
3. 如果ng-model-options用于某个元素的属性，它的所有子元素都起作用，除非被override.
使用定制验证器(看完direcitve后再更新)
1. angular对常见的input组件text, number, url, email, date, radio, checkbox和一些指令
   提供(required, pattern, minlength, maxlength, min, max)方面的验证；
2. 写自定义指令，可能用到自定义验证器；
3. ngModelController.$validators.myValidator，其中myValidator（名字任意取）是自定义验证函数；
4. directive.link的函数形式：function(scope, elm, attrs, ctrl)；
5. 可以给ctrl.$validators/ctrl.$asyncValidators添加一个函数属性，
   该函数是自定义验证器，形式为：function(modelValue, viewValue)，
   如：ctrl.$asyncValidators.username 添加一个username的验证器
   // ctrl.$validators.integer = function(){} //integer这个验证器原lib中没有，被添加进去；
6. /^\-?\d+$/: 最多只能有一个'-'，且至少包含一个数字;
7. $q:异步运行函数的服务，并使用其返回值或异常；
   var def = $q.defer(); //一个defer对象，它表示一个在将来结束的任务；
   API中的Parameters Type为*，且灰显的背景，表示可以没有值或有任意值；
   $q.when(value)：传递变量值 //Returns a promise of the passed value or promise
   def.resolve(); //when的别名
   def.reject(); // 前转被拒的原因
8. $timeout： angularjs版的window.setTimeout;
修改内置的验证器
1. 定制的邮箱正规表达式：var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@example\.com$/i;
2. <input type="email" ng-model="myEmail" overwrite-email name="overwrittenEmail" /> //overwrite-email是定制的指令
3. ctrl.$validators.email= function(){} //email这个验证器原lib中就有，被改写了；
实现定制的form control
1. 模型-》DOM：当数据传给 NgModelController.$formatters后，需要调$render方法，得自行实现；
   // model -> view
      ctrl.$render = function() {
        elm.html(ctrl.$viewValue);
      };
2. DOM-》模型： 实现$setViewValue；// ctrl.$setViewValue(elm.html());

chapter 13 指令: 创建自定义指令
什么是指令
1. 从高层来看，指令是DOM元素的属性，元素名，注释或css类的标记，以告之$compile去对这个DOM元素关联某种行为
  （如通过事件监听器），甚至改为这个DOM元素及其子元素；
2. angular有一套内置的指令，也可以自定义指令；
3. 在angular启动时，HMTL编译器会遍历DOM元素去匹配指令；
4. “编译HTML模板”：指关联指令到html，以使之可交互；
5. 与jQuery中元素匹配选择器类似，当指令是元素申明的一部分时，这个元素匹配指令；
   //<input ng-model="foo">//<input data-ng-model="foo">//<person>{{name}}</person>
指令的标准化形式：
1. 标准化：大小写敏感的camelCase形式，如ngBind，ngModel;
2. html是大小写不敏感的，通常用ng-model的形式；
   ng-bind（推荐版）,ng:bind,ng_bind,data-ng-bind(html验证工具版),x-ng-bind都合法；
   其它版本应避免使用；
3. 算法：
    a. 干掉以data-或x-打头的子串；
	b. 以:, -, 或 _切分单词，并合并以camelCase的形式；
指令类型
1. 四类：元素名，属性名，类名，注释（comment）
2. angular提供的指令匹配所有四类；
3. 用法：
*****************************************
<my-dir></my-dir>                    //推荐
<span my-dir="exp"></span>           //推荐
<!-- directive: my-dir exp -->       //不推荐
<span class="my-dir: exp;"></span>   //不推荐
*****************************************
4.  ng-repeat-start 和 ng-repeat-end可避免使用comment指令；
创建指令
1. module.directive（“标准化的指令名”，【依赖...  工厂函数】）
2. 工厂函数返回一个对象，对象中有配置项，会告之编译器如何行为；
3. 当编译器匹配到指令时，工厂函数只被$injector.invoke调用一次，可以完成初始化的工作；
4. 推荐工厂函数返回一个对象，而不是直接返回一个函数；
5. 指令前缀：最好带上自定义的指令前缀，如qldComputer，但不要带ng前缀；
模板扩展指令
1. 静态模板的代码复用，配置项： template/templateUrl；
2. 工厂返回对象：{template: 'Name: {{customer.name}} Address: {{customer.address}}'}  //内联式
3. 工厂返回对象：{templateUrl: 'my-customer.html'};  //外联式， 这样，my-customer.html这个代码片就可以多处复用；
   my-customer.html的内容： Name: {{customer.name}} Address: {{customer.address}} 
4. templateUrl的值可以是url，也可以是函数；
5. 这个函数的原型：function(elem, attr)；//elem: 指令作用的元素， attr: 这个元素的属性，attr.【属性名】的引用方式可得到属性值；
6. 使用约束选项，就可以不再受元素，属性的约束，可以扩展到class和comment；
7. A-->Attribute, E-->Element, C-->class, M-->comment，可以联合组成字符串，如'AEC'；
8. 工厂返回对象： {restrict: 'E',    templateUrl: 'my-customer.html'}  //使用了约束选项的返回对象
9. 给现存在组件增强功能时，使用属性；创建新组件使用元素；
孤立指令的scope
1. 没有孤立的scope，模板指令只能在即定的scope中使用一次，因为多次出现的模板都会绑到相同的底层model，会相互影响；
   在出现指令的地方，使用controler创建新的scope，太繁琐；
2. 把模板指令内的scope与外部分里出来，映射外部scope到内部scope，这就产生了scope配置项；
3. ***************************************
   {
    restrict: 'E',
    scope: {
      customerInfo: '=info'  //<my-customer info="naomi"></my-customer>  $scope.naomi =XX
    },
    templateUrl: 'my-customer-iso.html'
   }
   ***************************************
4. scope配置项是一个对象，里面包含一个属性，表示每个孤立scope如何绑定；
5. 属性名：孤立scope的属性名； 属性值：告诉编译器绑定到DOM元素的对应属性名；
6. =attr 在内部整体视为指令；  // '=bindToThis'  --> <div bind-to-this="thing">  
7. 同名缩写形式： scope: {  customer: '='} ；
8. 要想重用模板组件，就要用孤立scope;
创建操作DOM的指令
1. 使用link配置项； //{link: link};
2. 值是放置指令逻辑的地方；
3. link配置项注册DOM监听器并更新DOM的值；
4. link的指令逻辑在模板克隆后执行；
5. function link(scope, 
                 element, //sqlite包裹的与该指令匹配的对象，可做DOM操作； 
				 attrs, //对象，属性名值对，属性名是标准化的；
				 controller, //依赖于require 属性，可以是指令required的属性，或它自已的属性；
				 transcludeFn //每个适当嵌入的scope所预绑定的嵌入链接函数；
				 ) { ... }
6. 重点阅读： $compile（服务） API doc
7. 因为link函数有element，所以可以操作元素；
8. 单向绑定符号： <,  双向绑定符号：@ ； 
9. 与angular相关的事件： 
   a. $onInit(): DOM元素被创建，与之相关的绑定被初始化，但在 pre & post linking函数之前；
   b. $onChanges: 单向或双向绑定被更新时；
   c. $onDestroy(): 控制器包括的scope被销毁时；
   d. $postLink(): 控制器元素和它的子被链接之后；
9. 注册到scope和元素的监听器会自动销毁，注册到服务或DOM节点的监听器需要手动删除；
   //使用 element.on('$destroy', ...) ， scope.$on('$destroy', ...)
创建打包其它元素的指令
1. transclude: true, //能访问指令外部的scope，指令不再有自己内部的scope；
2. scope: {}； //创建一个内部的scope;
3. scope配置项的“&” 绑定： 在事件出现的特定时间，在原来的scope上下文中计算表达式；
创建加事件监听器的指令
创建通信的指令
1. require: '^^myTabs', //有^会去查它的父的controller;
2. 指令可以有自己的控制器；
3. controllerAs： 指定控制器别名；
4. controller能够暴露API，link函数可以使用require与controller交互；

chapter 14 组件：理解组件
1. 组件：一类特殊的指令，配置更为简单，适用基于组件的应用架构
2. 优点：
    a. 配置比普通指令简单；
	b. 有健全的缺省和最佳实践；
	c. 对基于组件的架构优化；
	d. 更容易升级到angular2;
3. 限制：
    a. 有DOM操作，加事件监听的不适合；
	b. 高级指令定义不适合；
	c. 被属性或class触发（而不是元素）的指令不适合；
创建和配置组件
1. 创建定义： angular.module('heroApp').component('组件名', {组件配置项})
2. 组件只控制它自己的视图和数据；
3. 组件有定义良好的输入输出API；
4. 组件输入只使用： 单向<   、//'='也是单向，但会向上传播到父scope
5. 当组件属性是string，且不变化，用@;
6. 组件输出使用&;
7. 组件有一个定义良好的生命周期；
8. 一个应用就是一个输入输出定义良好的组件树，且最小化双向绑定；
指令定义和组件定义的比较
其于组件的应用架构
组件树举例
作为路由模板的组件
组件间通信
组件控制器的单元测试

chapter 15 组件路由
总览
基于组件的应用
URL与导航
组件路由
出口（Outlets）
1. 每个组件都需要一个模板，模板中有一个或多个Outlet，以便渲染它的子组件；
2. 

根路由与组件
路由匹配
Heroes App举例 //...

chapter 16 动画
安装
如何工作
Class and ngClass动画钩子（hook）
哪些指令支持动画
如何在自定义指令中使用动画
在app启动时或页面加载时的动画
如何有选择的激活/去活/忽略动画
在动画开始前防止闪烁
防止与现存的或第三方库冲突
更多动画信息


chapter 17 模块
什么模块
为什么 
基础
推荐设置
模块加载与依赖
配置块
运行块
依赖
异步加载
创建vs获取
单元测试（略）


chapter 18 HTML编译器
总览
编译器
指令
理解视图
如何编译指令
编译与链接的区别
理解scope如何与被引用的指令协同工作


chapter 19 provider：使用injector去创建对象的五种recipe之一，最繁琐，也最容易理解；
模型的总体概念
值方法
工厂方法
服务方法
Provider方法
常量方法
特定目的对象
小结

chapter 20 启动
Angular的<javascript>标签
自动初始化
手动初始化
要点
延迟初始化


chapter 21 单元测试（略）
chapter 22 端到端测试（略）

chapter 23 $location服务
$location与window.location的比较
为什么要使用$location
$location不能做什么
$location API概览
$location服务配置
Getter 和 setter方法
Replace方法
Setters与字符编码
Hashbang与HTML5模式
警告


chapter 24 使用css
1. angular使用的css类
   ng-scope： 给元素定义一个新的scope;
   ng-isolate-scope: 给元素定义一个新的孤立的scope;
   ng-binding: 给元素做一个数据绑定，同ng-bind 或 {{}}；
   ng-invalid, ng-valid： form control完成输入验证，angular会视通过情况把其中一个class应用于这个control;
   ng-pristine, ng-dirty: 用户未与form control产生交互，angualar在form control上使用ng-pristine，否则使用ng-dirty；
   ng-touched, ng-untouched：form control未失去焦点时，使用ng-untouched，否则使用ng-touched；
   

chapter 25 国际化（略）

chapter 26 安全
安全问题报告
尽可能使用最新版本
表达式沙盒
HTTP请求
跨站请求伪造(XSRF/CSRF)
JSON劫持保护
严格的上下文转义
使用本地缓存
ngCsp(Content Security Policy)




chapter 27 Accessibility（to persons with disabilities，略）
chapter 28 IE兼容性
1. angularjs1.2版本支持到IE8；
2. angularjs1.3-1.55版本支持到IE9及以上版本；
3. 使用ng-style，而不是style="{{ someCss }}"；
4. 错误：<button type="{{someExpression}}"">Disabled</button>
   正确：<button ng-attr-type="{{someExpression}}"">Disabled</button>

chapter 29 产品环境运行
1. 缺省情况下，AngularJS会把“绑定”和“DOM对应的scope”关联起来，给有数据绑定的DOM元素加上css类，结果：
   a. 如果使用ngBind, ngBindHtml 或 {{...}}，绑定数据和css类ng-binding就会关联到对应元素；
   b. 当编译器创建一个新的scope时，这个新scope和css类ng-scope、ng-isolated-scope会关联到对应元素，
      这个新的scope可以通过element.scope() 和 element.isolateScope()访问；
   c. 这些是属于调试信息，Protractor and Batarang会用到；
2. 去掉调试信息，在js文件中加入：
   myApp.config(['$compileProvider', function ($compileProvider) {
	$compileProvider.debugInfoEnabled(false);
	}]); 
3. 打开调试信息：浏览器-》控制台-》angular.reloadWithDebugInfo(); //重载页面，打开调试信息；
4. 严格DI模式：不允许可注入的函数使用隐式标记法，会抛出错误；
5. 可注入的函数要使用显示标记法（chapter 7 方法一，方法二），这样无需动态发现，可改进性能；
6. 建议使用类似ng-annotate的工具；//https://github.com/olov/ng-annotate
7. 严格DI模式可以在js压缩后仍有效；
8. 申明为严格模式：
在模板文件中申明：
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   <div ng-app="myApp" ng-strict-di>
		<!-- your app here -->
   </div>
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
或在js中申明：
angular.bootstrap(document, ['myApp'], {
  strictDi: true
});
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

chapter 30 迁移（略）




























